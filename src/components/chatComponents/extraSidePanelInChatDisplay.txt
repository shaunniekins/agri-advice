const calculateAge = (birthDate: string): number => {
  const birthDateObj = new Date(birthDate);
  const currentDate = new Date();
  return differenceInYears(currentDate, birthDateObj);
};

const currentMessage: any = filteredMessages[currentIndex];

const handleNext = () => {
  setCurrentIndex((prevIndex) =>
    prevIndex < filteredMessages.length - 1 ? prevIndex + 1 : prevIndex
  );
};

const handlePrev = () => {
  setCurrentIndex((prevIndex) => (prevIndex > 0 ? prevIndex - 1 : prevIndex));
};


...

{
  /* <div className="h-full overflow-y-auto hidden md:block"> */
}
{
  /*  */
}
<div
  className={`h-full overflow-y-auto md:block bg-[#F4FFFC] md:bg-none rounded-tl-md md:rounded-none ${
    otherPanelOpen
      ? "fixed right-0 top-0 z-10 py-5 px-3 flex flex-col w-72 md:w-96 lg:w-auto md:static md:flex-none md:block md:p-0"
      : "hidden"
  }`}
>
  {/* partners details */}
  <div className="flex flex-col gap-3">
    {partnerData && (
      <Card className="shadow-none">
        <CardHeader className="flex justify-center">
          <h1 className="font-bold">
            {currentUserType === "farmer" ? "Technician" : "Pig Farmer"}
            &apos;s Details
          </h1>
        </CardHeader>
        <CardBody className="text-sm">
          <div className="flex items-center gap-3 mb-4">
            <div className="flex">
              {!partnerData.profile_picture ? (
                <Avatar
                  name={partnerData.first_name[0] + partnerData.last_name[0]}
                  showFallback
                />
              ) : (
                <Avatar
                  src={partnerData.profile_picture}
                  alt="Profile"
                  showFallback
                  className="rounded-full object-cover cursor-pointer"
                />
              )}
            </div>
            <div className="flex flex-col">
              <span className="font-semibold">{partnerData.first_name}</span>
              <span className="text-xs">{partnerData.email}</span>
            </div>
          </div>
          <h2>
            <span className="font-semibold">First Name: </span>
            {partnerData.first_name}
          </h2>
          <h2>
            <span className="font-semibold">Last Name: </span>
            {partnerData.last_name}
          </h2>
          <h2>
            <span className="font-semibold">Email: </span>
            {partnerData.email}
          </h2>
          <h2>
            <span className="font-semibold">Location: </span>
            {partnerData.address}
          </h2>
          <h2>
            <span className="font-semibold">Age: </span>
            {partnerData.birth_date
              ? calculateAge(partnerData.birth_date) + " years old"
              : "N/A"}
          </h2>
          {currentUserType !== "farmer" && (
            <>
              <h2>
                <span className="font-semibold">No. of Pigs: </span>
                {partnerData.num_heads || "N/A"}
              </h2>
              <h2>
                <span className="font-semibold">Years of Experience: </span>
                {partnerData.experience_years || "N/A"}
              </h2>
              <h2>
                <span className="font-semibold">Operations: </span>
                {partnerData.operations || "N/A"}
              </h2>
              <h2>
                <span className="font-semibold">Complete Address: </span>
                {partnerData.complete_address || "N/A"}
              </h2>
            </>
          )}
          {currentUserType !== "technician" && (
            <>
              <h2>
                <span className="font-semibold">Specialization: </span>
                {partnerData.specialization || "N/A"}
              </h2>
              <h2>
                <span className="font-semibold">Experiences: </span>
                {partnerData.experiences || "N/A"}
              </h2>
            </>
          )}
        </CardBody>
      </Card>
    )}
  </div>
  {/* other chat */}
  <div className="flex flex-col gap-3 mt-5">
    {currentMessage ? (
      <div className="relative">
        <Card className="shadow-none">
          <CardHeader className="flex flex-col justify-center">
            <h1 className="font-bold">
              {currentUserType === "farmer"
                ? "More Advice Here"
                : "Your Advice"}
            </h1>
            <span className="text-[0.7rem]">
              {formatMessageDate(currentMessage.created_at)}
            </span>
          </CardHeader>
          <CardBody>
            <div
              className="w-full text-sm break-words"
              style={{
                overflowWrap: "break-word",
                wordBreak: "break-word",
                maxWidth: "100%",
              }}
            >
              {renderMessage(currentMessage.message)}
            </div>
          </CardBody>
        </Card>

        {currentUserType === "technician" &&
          !currentMessage.is_ai &&
          feedbackMessages.has(currentMessage.chat_message_id) && (
            <div className="z-10 absolute -bottom-5 left-0 flex p-2">
              <Button
                color="success"
                isIconOnly
                className="p-1 rounded-full bg-green-400 bg-opacity-80"
                style={{
                  minWidth: "0",
                  width: "auto",
                  height: "auto",
                }}
                onPress={async () => {
                  setCurrentFeedbackId("");
                  setRatings(0);
                  setFeedbackMessage("");

                  const response = await fetchFeedback(
                    currentMessage.chat_message_id
                  );

                  if (response) {
                    setCurrentFeedbackId(response.feedback_id);
                    setRatings(response.ratings);
                    setFeedbackMessage(response.feedback_message);
                  }
                  setOpenFeedback(true);
                }}
              >
                <MdOutlineChat size={15} color="yellow" />
              </Button>
            </div>
          )}

        <div className="z-10 absolute -top-5 flex justify-between w-full mt-3">
          {/* <div className="z-10 absolute -bottom-5 left-0 flex justify-start items-center p-2"> */}

          <Button
            isIconOnly
            size="sm"
            color="success"
            onPress={handlePrev}
            isDisabled={currentIndex === 0}
          >
            <MdOutlineArrowBack size={20} />
          </Button>
          <Button
            isIconOnly
            size="sm"
            color="success"
            onPress={handleNext}
            isDisabled={currentIndex === filteredMessages.length - 1}
          >
            <MdOutlineArrowForward size={20} />
          </Button>
        </div>

        {currentUserType === "farmer" && !currentMessage.is_ai && (
          <div className="z-10 absolute -bottom-5 left-0 flex justify-start items-center p-2">
            <Button
              color="success"
              isIconOnly
              className="p-1 rounded-full bg-green-400 bg-opacity-80"
              style={{
                minWidth: "0",
                width: "auto",
                height: "auto",
              }}
              onPress={async () => {
                setCurrentFeedbackId("");
                setRatings(0);
                setFeedbackMessage("");

                setChatMessageIdFeedback(currentMessage.chat_message_id);
                const response = await fetchFeedback(
                  currentMessage.chat_message_id
                );

                if (response) {
                  setCurrentFeedbackId(response.feedback_id);
                  setRatings(response.ratings);
                  setFeedbackMessage(response.feedback_message);
                }
                setOpenFeedback(true);
              }}
            >
              <MdOutlineStarRate size={15} color="yellow" />
            </Button>
          </div>
        )}
      </div>
    ) : (
      <p>No messages to display.</p>
    )}
  </div>
</div>;
